// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0

package e2e_test

import (
	"fmt"
	"os"
	"strings"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/utils/ptr"

	buildapi "github.com/shipwright-io/build/pkg/apis/build/v1beta1"
)

var _ = Describe("Vulnerability Scanning", Label("FEATURE:VulnerabilityScanning"), func() {
	var testID string
	var err error
	var buildRun *buildapi.BuildRun
	var cbs *clusterBuildStrategyPrototype
	var insecure bool

	AfterEach(func() {
		testBuild.DeleteBR(buildRun.Name)
	})

	Context("Scanning for vulnerabilities in container images", Label("CORE", "FAILING"), func() {
		var outputImage string
		BeforeEach(func() {
			testID = generateTestID("vuln")
			outputImage = fmt.Sprintf("%s/%s:%s",
				os.Getenv(EnvVarImageRepo),
				testID,
				"latest",
			)

			// Assume we use secure registry unless it is a cluster
			// internal registry used as part of the test setup
			insecure = strings.Contains(outputImage, "cluster.local")
			cbs = NewClusterBuildStrategyPrototype().
				Name("crane-pull-" + testID).
				BuildStep(buildapi.Step{
					Name:       "crane-pull",
					Image:      "gcr.io/go-containerregistry/crane:latest",
					WorkingDir: "$(params.shp-source-root)",
					SecurityContext: &corev1.SecurityContext{
						RunAsUser:  ptr.To[int64](1000),
						RunAsGroup: ptr.To[int64](1000),
					},
					Env: []corev1.EnvVar{
						{Name: "DOCKER_CONFIG", Value: "/tekton/home/.docker"},
						{Name: "HOME", Value: "/tekton/home"},
					},
					Command: []string{"crane"},
					Args: []string{
						"pull",
						"--format=tarball",
						"ghcr.io/shipwright-io/shipwright-samples/node:12",
						"$(params.shp-output-directory)/image.tar",
					},
				})
		})

		It("should find vulnerabilities in an image", func() {
			cbs.TestMe(func(cbs *buildapi.ClusterBuildStrategy) {
				unfixed := true
				ignoreSeverity := buildapi.IgnoredLow
				buildRun, err = NewBuildRunPrototype().
					Namespace(testBuild.Namespace).
					Name(testID).
					WithBuildSpec(NewBuildPrototype().
						ClusterBuildStrategy(cbs.Name).
						Namespace(testBuild.Namespace).
						Name(testID).
						OutputImage(outputImage).
						OutputImageCredentials(os.Getenv(EnvVarImageRepoSecret)).
						OutputImageInsecure(insecure).
						OutputVulnerabilitySettings(buildapi.VulnerabilityScanOptions{
							Enabled:       true,
							FailOnFinding: true,
							Ignore: &buildapi.VulnerabilityIgnoreOptions{
								ID:       []string{"CVE-2021-3807", "CVE-2022-33987"},
								Severity: &ignoreSeverity,
								Unfixed:  &unfixed,
							},
						}).
						BuildSpec()).
					Create()
				Expect(err).ToNot(HaveOccurred())
				validateBuildRunToFail(testBuild, buildRun)
				buildRun, err = testBuild.GetBR(buildRun.Name)
				Expect(err).To(BeNil())
				Expect(buildRun).ToNot(BeNil())
				Expect(buildRun.Status).ToNot(BeNil())
				Expect(buildRun.Status.Output).ToNot(BeNil())
				Expect(buildRun.Status.Output.Vulnerabilities).ToNot(BeNil())
				Expect(len(buildRun.Status.Output.Vulnerabilities)).ToNot(BeZero())

			})
		})
	})
})
