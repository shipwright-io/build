// Copyright The Shipwright Contributors
//
// SPDX-License-Identifier: Apache-2.0
package image

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os/exec"
	"sort"
	"strings"
	"time"

	"github.com/google/go-containerregistry/pkg/authn"
	buildapi "github.com/shipwright-io/build/pkg/apis/build/v1beta1"
)

type TrivyVulnerability struct {
	VulnerabilityID string `json:"vulnerabilityID,omitempty"`
	Severity        string `json:"severity,omitempty"`
}

type TrivyResult struct {
	Results []struct {
		Vulnerabilities []TrivyVulnerability `json:"vulnerabilities"`
	} `json:"Results"`
}

func RunVulnerabilityScan(ctx context.Context, imagePath string, settings buildapi.VulnerabilityScanOptions, auth *authn.AuthConfig, insecure bool, imageInDir bool, vulnCountLimit int) ([]buildapi.Vulnerability, error) {

	trivyArgs := []string{"image", "--quiet", "--disable-telemetry", "--skip-version-check", "--format", "json"}
	if imageInDir {
		trivyArgs = append(trivyArgs, "--input", imagePath)
	} else {
		trivyArgs = append(trivyArgs, imagePath)
		authParams := getAuthStringForTrivyScan(auth)
		trivyArgs = append(trivyArgs, authParams...)

		if insecure {
			trivyArgs = append(trivyArgs, "--insecure")
		}
	}
	if settings.Ignore != nil {
		if settings.Ignore.Severity != nil {
			severity := getSeverityStringForTrivyScan(*settings.Ignore.Severity)
			trivyArgs = append(trivyArgs, "--severity", severity)
		}
		if settings.Ignore.Unfixed != nil && *settings.Ignore.Unfixed {
			trivyArgs = append(trivyArgs, "--ignore-unfixed")
		}
	}

	var result []byte
	var err error

	for i := 0; i < 10; i++ {
		cmd := exec.CommandContext(ctx, "trivy", trivyArgs...)
		cmd.Stdin = nil

		result, err = cmd.CombinedOutput()
		if err == nil {
			break
		}

		sResult := string(result)
		log.Printf("failed to run trivy:\n%s", sResult)

		// Retry the following errors
		//
		// FATAL    Fatal error    init error: DB error: failed to download vulnerability DB: database download error: OCI repository error: 1 error occurred:
		//  GET https://ghcr.io/v2/aquasecurity/trivy-db/manifests/2: TOOMANYREQUESTS: retry-after: 508.904┬Ás, allowed: 44000/minute
		//
		// FATAL	Fatal error	init error: DB error: failed to download vulnerability DB: OCI artifact error: failed to download vulnerability DB: failed to download artifact from any source
		if i < 10 && strings.Contains(sResult, "failed to download vulnerability DB") {
			log.Println("Will retry")
			time.Sleep(time.Second)
		} else {
			return nil, fmt.Errorf("failed to run trivy: %w", err)
		}
	}

	var trivyResult TrivyResult
	if err := json.Unmarshal(result, &trivyResult); err != nil {
		return nil, err
	}

	// Get the vulnerabilities from the trivy scan
	vulnerabilities := parseTrivyResult(trivyResult, settings.Ignore)

	// Sort the vulnerabilities by severity
	severityOrder := map[buildapi.VulnerabilitySeverity]int{
		buildapi.Critical: 0,
		buildapi.High:     1,
		buildapi.Medium:   2,
		buildapi.Low:      3,
		buildapi.Unknown:  4,
	}
	sort.Slice(vulnerabilities, func(i, j int) bool {
		return severityOrder[vulnerabilities[i].Severity] < severityOrder[vulnerabilities[j].Severity]
	})

	if len(vulnerabilities) > vulnCountLimit {
		vulnerabilities = vulnerabilities[:vulnCountLimit]
	}

	return vulnerabilities, nil
}

func getSeverityStringForTrivyScan(ignoreSeverity buildapi.IgnoredVulnerabilitySeverity) string {
	switch ignoreSeverity {
	case buildapi.IgnoredLow:
		return "MEDIUM,HIGH,CRITICAL"
	case buildapi.IgnoredMedium:
		return "HIGH,CRITICAL"
	case buildapi.IgnoredHigh:
		return "CRITICAL"
	default:
		return "LOW,MEDIUM,HIGH,CRITICAL"
	}
}

func parseTrivyResult(trivyResult TrivyResult, ignoreOptions *buildapi.VulnerabilityIgnoreOptions) []buildapi.Vulnerability {
	var totalVulnerabilities []TrivyVulnerability
	for _, result := range trivyResult.Results {
		totalVulnerabilities = append(totalVulnerabilities, result.Vulnerabilities...)
	}

	var vulnerabilities []buildapi.Vulnerability

	// create a map for ignored vulnerabilities
	ignoreMap := make(map[string]bool)
	if ignoreOptions != nil {
		for _, vuln := range ignoreOptions.ID {
			ignoreMap[vuln] = true
		}
	}
	for _, vuln := range totalVulnerabilities {
		if !ignoreMap[vuln.VulnerabilityID] {
			vulnerability := buildapi.Vulnerability{
				ID:       vuln.VulnerabilityID,
				Severity: buildapi.VulnerabilitySeverity(strings.ToLower(vuln.Severity)),
			}
			vulnerabilities = append(vulnerabilities, vulnerability)
		}
	}
	return vulnerabilities
}

func getAuthStringForTrivyScan(auth *authn.AuthConfig) []string {
	var authParams []string
	if auth != nil {
		if auth.Username != "" {
			authParams = append(authParams, "--username", auth.Username)
		}
		if auth.Password != "" {
			authParams = append(authParams, "--password", auth.Password)
		}
		if auth.RegistryToken != "" {
			authParams = append(authParams, "--registry-token", auth.RegistryToken)
		}
	}
	return authParams
}
